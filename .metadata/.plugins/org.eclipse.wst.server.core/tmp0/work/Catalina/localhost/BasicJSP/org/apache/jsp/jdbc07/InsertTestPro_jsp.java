/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.38
 * Generated at: 2019-06-24 02:41:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jdbc07;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class InsertTestPro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");
request.setCharacterEncoding("utf-8"); 
      out.write("\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t");
	
	String id = request.getParameter("id");// 입력할 데이터 가져오기
	String pwd = request.getParameter("pwd");
	String name = request.getParameter("name");
	String num1 = request.getParameter("num1");
	String num2 = request.getParameter("num2");
	String email = request.getParameter("email");
	String phone = request.getParameter("phone");
	String zipcode = request.getParameter("zipcode");
	String address = request.getParameter("address");
	String job = request.getParameter("job");
	
	
	System.out.println("id : " + id);
	System.out.println("pwd : " + pwd);//제대로 가져왔는지 확인상 한번 찍어주는 것.
	System.out.println("name : " + name);
	System.out.println("num1 : "+ num1);
	System.out.println("num2 : "+ num2);
	System.out.println("email : " + email);
	System.out.println("phone : "+ phone);
	System.out.println("zipcode : "+ zipcode);
	System.out.println("address : "+ address);
	System.out.println("job : "+ job);
	
	Connection conn = null;    //데이터 베이스 접속할려고  //드라이버 매니져가 만들어줌 드라이버매니져는 클렉스포 네임이 만들어줬다. 
	PreparedStatement pstmt = null;   //쿼리문 닫는게 statment인데  이제부턴 prepared쓸거임. 요즘은 프리페얼드를 더 사용함 더빠르니까 
										//근데 사용할때는 prepare 로 쓴다. ed 없음 선언할때만쓴다
	
	String str="";
	try {
		String jdbcUrl = "jdbc:mysql://localhost:3306/mydb";
		String dbId = "root";
		String dbPwd = "mirim2"; //각 주소, 아이디, 비밀번호를 객체로 설정해놓는 것이 좋은 소스이다.
	//불변함. 
		
		Class.forName("org.gjt.mm.mysql.Driver");			
		//위에꺼 try밖에있어도 ㄱㅊ지만 안전하게. 
		conn = DriverManager.getConnection(jdbcUrl, dbId, dbPwd);//	한번썻으면 변하지 않음
		//DriverManager는Class.forName("org.gjt.mm.mysql.Driver");	얘가 만들어주는거임
		//이거를 통해서 이제 접속시작함. 
		String sql = "insert into tblRegister(id, pwd, name, num1, num2, email, phone, zipcode, address, job) values (?, ?, ?, ?, ?,?,?,?,?)";
		// ?를 쓴이뉴는 값 대입할때 그냥 쓰는거임
		pstmt = conn.prepareStatement(sql);
		//db쿼리에 접속해서 시작할래? 하는 문장임.   윗 문장을 
		pstmt.setString(1, id);
		//아이디 매핑(대입)
		pstmt.setString(2, pwd);
		pstmt.setString(3, name);
		pstmt.setString(4, num1);
		pstmt.setString(5, num2);
		pstmt.setString(6, email);
		pstmt.setString(7, phone);
		pstmt.setString(8, zipcode);
		pstmt.setString(9, address);
		pstmt.setString(10, job);
		
		
		pstmt.executeUpdate();
		//DB에 Data     .... 얘가 실행시키는 거임. 
		
		
		str = "tblRegister 테이블에 새로운 레코드를 추가했습니다.";
	}catch(Exception e){
		e.printStackTrace();
		str = "tblRegister 테이블에 새로운 레코드 추가에 실패했습니다.";
	}finally{
		if(pstmt != null){
			try{
				pstmt.close();
			} catch(SQLException sqle){}
		}
		if(conn != null){
			try{
				pstmt.close();
			} catch(SQLException sqle){}
		}
	}
					
      out.write("\r\n");
      out.write("<!--  셀렉트랑 업데이트가 뭐라했노  -->\r\n");
      out.write("\t");
      out.print( str );
      out.write("\r\n");
      out.write("\t<!--  -->\r\n");
      out.write("\t");
 if(str.equals("tblRegister 테이블에 새로운 레코드를 추가했습니다.")){ 
      out.write("\r\n");
      out.write("\t<form method=\"post\" action=useJDBC.jsp>\r\n");
      out.write("\t\t<input type=submit value=\"데이터 조회\">\r\n");
      out.write("\t</form>\r\n");
      out.write("\t");
} 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
